Name: Yifei Huang
Documentation for RM Layer

Overall Design:
In my design, each file consists of a header page, and each page consists of a page header. The header page has information relevant to the entire file. Each page header consists of information relevant to each page. 
Because each file needs a header page, in RM_Manager’s CreateFile, I open up the file and allocate a new page for this header. The file is then closed before the end of CreateFile. Also, when I open up a file, I store its header contents as a private variable in RM_FileHandle and unpin the first page. This opens up a page slot in the buffer for other pages. When the file is closed, I check whether the header has been modified (with a header_modified flag), and if so, I rewrite it to the first page of the file.

Free list:
The file header consists of a field (firstFreePage), which is the page number of the first free page in the file. Each page contains a field in its header (nextFreePage), creating a linked list of free pages.  Whenever we add to a file, we always add to the first free page available in this linked list. Therefore, the first page is the only one that can be full. When page A is full, (firstFreePage) in the file header will be set to the page A’s header’s (nextFreePage). Whenever we delete a record, we check whether a page has gone from full to not full. If so, we add this page to the beginning of the free list. When there are no free pages, we allocate a page and add it to the beginning of the free list.

Free records:
I use a bitmap to keep track of the free records in the page, where each bit refers to a record slot in the page. Bitmap manipulation methods are declared as part of RM_FileHandle. The number of records that can fit in the page are calculated through the equation 
X = floor((PF_PAGE_SIZE * 1.0) / (1.0 * recSize + 1.0/8))
to maximize the number of records that can fit on a page. We can retrieve the location of the bitmap by the bitmap offset by storing the size of the page header and its size in the file header. 

FileScan:
In Filescan, I keep track of the current page open so I don’t have to make multiple calls to pin and unpin a page. This maximizes efficiency in code execution. The filescan code makes a call to GetNextRecord in its RM_FileHandle object to retrieve the next record. If the scan closes early, it makes sure to unpin any current page in CloseScan, or its destructor, before exiting.

Code structure:
RM_Manager takes care of creating, opening, closing, and destroying files, calling into the PF layer. Because it needs to set up the private variables of RM_FileHandle, I made RM_Manager a friend class to RM_FileHandle so that when it opens, it can set up the FileHandle. The manipulation of these private variables are constrained to the function SetupFH and CloseFH. 
RM_FileHandle has many functions for manipulating bits. Two of them are static functions because they do not manipulate the contents of the page, and are called by RM_Manager to retrieve the record and buffer sizes. There are two helper functions, GetPageDataAndBitmap and GetPageNumAndSlot, which are called often in each of the methods that deal with record operations. However, each one of those functions should check whether the RM_FileHandle refers to an open file before operating on its contents, which is the reason for the function isValidFH. 
RM_FileScan will usually be run while going through the entire file, so we pin each page until we are done retrieving all records from it. There are 6 comparison functions, and a function pointer which will be set to one of the 6 depending on the CompOp passed in. The value of the comparator must be stored inside of the scan. Since the size of the value varies, we must malloc it, and free it when we close the scan, or when the instance goes out of scope. 
Filescan also finds the next records by calling GetNextRec in RM_FileHandle. Because of this, it must be a friend class of RM_FileHandle. Whenever it retrieves a new page, FileScan goes into its header, saves the number of records on the page, and goes through the records until it’s seen all of them, and then unpins the page.  The flag useNextPage tells the FileHandle object whether to search for the next page (to avoid repining the current page) or keep searching in the current page.
RM_Record needs to be able to store variable size records, so we create a new char array whose length depends on the size of the record. SetRecord is not part of the public interface, so I can make it private, and my program will still work, but it needed to be public in order to run some of the tests. Because SetRecord is usually private, I made RM_FileHandle a friend of RM_Record so it can go and call SetRecord and manipulate record objects. 

Testing:
I first tested on the supplied rm_test.cc. I also ran this with rm_testkpg, rm_testgmf, and rm_testrecsizes provided in the class repo for tests. I then wrote a few of my own tests, which I added to the class repo as rm_testyh_random. I ran valgrind on all tests. 

Known Bugs:
Not yet?

Additional Help:
I briefly talked about the overall design with classmate Sophia Nguyen a few days before starting the assignment. We also talked on/off during debugging (mostly questions involving “did you also get this bug, and what was your problem?”), but all work was done separately. Jaeho helped us figure the bug with keeping PF_Manager as a reference variable in RM_Manager to avoid segfaults in deleting PF_Manager multiple times.
